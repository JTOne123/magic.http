<?xml version="1.0"?>
<doc>
    <assembly>
        <name>magic.http.contracts</name>
    </assembly>
    <members>
        <member name="T:magic.http.contracts.IHttpClient">
            <summary>
            Gives you easy one line of code access to invoke HTTP REST requests.
            </summary>
        </member>
        <member name="M:magic.http.contracts.IHttpClient.PostAsync``2(System.String,``0,System.String,System.String)">
            <summary>
            Posts an object asynchronously to the specified URL. Notice, you can supply a Stream as your request,
            and the service will intelligently determine it's a stream, and serialize it directly on to the HTTP request stream.
            </summary>
            <typeparam name="Request">Type of request.</typeparam>
            <typeparam name="Response">Type of response.</typeparam>
            <param name="url">URL of your request.</param>
            <param name="request">Payload of your request.</param>
            <param name="contentType">Optional Content-Type for your request. Defaults to "application/json" if omitted.</param>
            <param name="token">Optional Bearer token for your request.</param>
            <returns>Object returned from your request.</returns>
        </member>
        <member name="M:magic.http.contracts.IHttpClient.PutAsync``2(System.String,``0,System.String,System.String)">
            <summary>
            Puts an object asynchronously to the specified URL. Notice, you can supply a Stream as your request,
            and the service will intelligently determine it's a stream, and serialize it directly on to the HTTP request stream.
            </summary>
            <typeparam name="Request">Type of request.</typeparam>
            <typeparam name="Response">Type of response.</typeparam>
            <param name="url">URL of your request.</param>
            <param name="request">Payload of your request.</param>
            <param name="contentType">Optional Content-Type for your request. Defaults to "application/json" if omitted.</param>
            <param name="token">Optional Bearer token for your request.</param>
            <returns>Object returned from your request.</returns>
        </member>
        <member name="M:magic.http.contracts.IHttpClient.GetAsync``1(System.String,System.String)">
            <summary>
            Gets a resource from some URL.
            </summary>
            <typeparam name="Response">Type of response.</typeparam>
            <param name="url">URL of your request.</param>
            <param name="token">Optional Bearer token for your request.</param>
            <returns>Object returned from your request.</returns>
        </member>
        <member name="M:magic.http.contracts.IHttpClient.GetAsync(System.String,System.Action{System.IO.Stream},System.String)">
            <summary>
            Gets a resource from some URL. Notice, this overload requires you to supply
            an Action taking a Stream as its input, from where you can directly access the response content,
            without having to load it into memory. This i suseful for downloading larger documents from some URL.
            </summary>
            <param name="url">URL of your request.</param>
            <param name="functor">Action lambda function given the response Stream for you to do whatever you wish with once the request returns.</param>
            <param name="token">Optional Bearer token for your request.</param>
            <returns>Async void Task</returns>
        </member>
        <member name="M:magic.http.contracts.IHttpClient.DeleteAsync``1(System.String,System.String)">
            <summary>
            Deletes some resource.
            </summary>
            <typeparam name="Response">Type of response.</typeparam>
            <param name="url">URL of your request.</param>
            <param name="token">Optional Bearer token for your request.</param>
            <returns>Result of your request.</returns>
        </member>
    </members>
</doc>
